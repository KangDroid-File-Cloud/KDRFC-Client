/* tslint:disable */
/* eslint-disable */
/**
 * KDRFC Server
 * KDRFC Main Server
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
  /**
   *
   * @type {string}
   * @memberof AccessTokenResponse
   */
  accessToken: string;
  /**
   *
   * @type {string}
   * @memberof AccessTokenResponse
   */
  refreshToken: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const AuthenticationProvider = {
  Self: 'Self',
  Google: 'Google',
  Kakao: 'Kakao'
} as const;

export type AuthenticationProvider =
  (typeof AuthenticationProvider)[keyof typeof AuthenticationProvider];

/**
 *
 * @export
 * @interface BlobEligibleResponse
 */
export interface BlobEligibleResponse {
  /**
   * Blob Temp Token(One-Time-Use), EXP in 1 min.
   * @type {string}
   * @memberof BlobEligibleResponse
   */
  token?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */

export const BlobFileType = {
  NUMBER_0: 0,
  NUMBER_1: 1
} as const;

export type BlobFileType = (typeof BlobFileType)[keyof typeof BlobFileType];

/**
 *
 * @export
 * @interface BlobProjection
 */
export interface BlobProjection {
  /**
   * Blob ID
   * @type {string}
   * @memberof BlobProjection
   */
  id?: string | null;
  /**
   * Blob Name
   * @type {string}
   * @memberof BlobProjection
   */
  name?: string | null;
  /**
   * File Length
   * @type {number}
   * @memberof BlobProjection
   */
  length?: number;
  /**
   * Date Blob Uploaded
   * @type {string}
   * @memberof BlobProjection
   */
  uploadDate?: string;
  /**
   * Parent Folder Id.
   * @type {string}
   * @memberof BlobProjection
   */
  parentFolderId?: string | null;
  /**
   *
   * @type {BlobFileType}
   * @memberof BlobProjection
   */
  blobFileType?: BlobFileType;
}

/**
 *
 * @export
 * @interface CreateBlobFolderRequest
 */
export interface CreateBlobFolderRequest {
  /**
   * Parent Folder Id(Where this blob is located?)
   * @type {string}
   * @memberof CreateBlobFolderRequest
   */
  parentFolderId?: string | null;
  /**
   * Folder Name
   * @type {string}
   * @memberof CreateBlobFolderRequest
   */
  folderName?: string | null;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  message?: string | null;
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  traceIdentifier?: string | null;
}
/**
 *
 * @export
 * @interface JoinTokenResponse
 */
export interface JoinTokenResponse {
  /**
   *
   * @type {string}
   * @memberof JoinTokenResponse
   */
  joinToken?: string | null;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
  /**
   *
   * @type {AuthenticationProvider}
   * @memberof LoginRequest
   */
  authenticationProvider: AuthenticationProvider;
  /**
   * Email Address(Only applies when self authentication provider)
   * @type {string}
   * @memberof LoginRequest
   */
  email?: string | null;
  /**
   * Authentication ID(OAuth ID when OAuth, Password when Self)
   * @type {string}
   * @memberof LoginRequest
   */
  authCode: string;
}

/**
 *
 * @export
 * @interface RegisterAccountCommand
 */
export interface RegisterAccountCommand {
  /**
   * Nickname of User.
   * @type {string}
   * @memberof RegisterAccountCommand
   */
  nickname: string;
  /**
   * Email of User
   * @type {string}
   * @memberof RegisterAccountCommand
   */
  email: string;
  /**
   *
   * @type {AuthenticationProvider}
   * @memberof RegisterAccountCommand
   */
  authenticationProvider: AuthenticationProvider;
  /**
   * Authentication Code.(Password when self.)
   * @type {string}
   * @memberof RegisterAccountCommand
   */
  authCode: string;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Dropout(Remove) account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dropoutAccount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/account/dropout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication KDRFCAuthorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Join(Register) to KDRFC Service.
     * @param {RegisterAccountCommand} [registerAccountCommand] Join Account Request(Register Request Body)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinAccount: async (
      registerAccountCommand?: RegisterAccountCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/account/join`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerAccountCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Login to KDRFC Service.
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginAccount: async (
      loginRequest?: LoginRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/account/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Dropout(Remove) account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dropoutAccount(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dropoutAccount(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Join(Register) to KDRFC Service.
     * @param {RegisterAccountCommand} [registerAccountCommand] Join Account Request(Register Request Body)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async joinAccount(
      registerAccountCommand?: RegisterAccountCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.joinAccount(
        registerAccountCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Login to KDRFC Service.
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginAccount(
      loginRequest?: LoginRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginAccount(loginRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AccountApiFp(configuration);
  return {
    /**
     *
     * @summary Dropout(Remove) account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dropoutAccount(options?: any): AxiosPromise<void> {
      return localVarFp.dropoutAccount(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Join(Register) to KDRFC Service.
     * @param {RegisterAccountCommand} [registerAccountCommand] Join Account Request(Register Request Body)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinAccount(
      registerAccountCommand?: RegisterAccountCommand,
      options?: any
    ): AxiosPromise<AccessTokenResponse> {
      return localVarFp
        .joinAccount(registerAccountCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Login to KDRFC Service.
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginAccount(loginRequest?: LoginRequest, options?: any): AxiosPromise<AccessTokenResponse> {
      return localVarFp
        .loginAccount(loginRequest, options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
  /**
   *
   * @summary Dropout(Remove) account
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public dropoutAccount(options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .dropoutAccount(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Join(Register) to KDRFC Service.
   * @param {RegisterAccountCommand} [registerAccountCommand] Join Account Request(Register Request Body)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public joinAccount(
    registerAccountCommand?: RegisterAccountCommand,
    options?: AxiosRequestConfig
  ) {
    return AccountApiFp(this.configuration)
      .joinAccount(registerAccountCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Login to KDRFC Service.
   * @param {LoginRequest} [loginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public loginAccount(loginRequest?: LoginRequest, options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .loginAccount(loginRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * StorageApi - axios parameter creator
 * @export
 */
export const StorageApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create Folder under parent folder.
     * @param {CreateBlobFolderRequest} [createBlobFolderRequest] Create Blob Folder Request. See schemas below.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolderAsync: async (
      createBlobFolderRequest?: CreateBlobFolderRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/storage/folders`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication KDRFCAuthorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createBlobFolderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * This API does return 202 in case of long-processing recursive deletion.
     * @summary Remove Blob(and it\'s subfolder if file type is folder.)
     * @param {string} blobId Target blob ID to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlobAsync: async (
      blobId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'blobId' is not null or undefined
      assertParamExists('deleteBlobAsync', 'blobId', blobId);
      const localVarPath = `/api/storage/{blobId}`.replace(
        `{${'blobId'}}`,
        encodeURIComponent(String(blobId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication KDRFCAuthorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Download Blob File
     * @param {string} blobId A blob ID to download file
     * @param {string} [blobAccessToken] A Blob Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadBlobAsync: async (
      blobId: string,
      blobAccessToken?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'blobId' is not null or undefined
      assertParamExists('downloadBlobAsync', 'blobId', blobId);
      const localVarPath = `/api/storage/{blobId}/download`.replace(
        `{${'blobId'}}`,
        encodeURIComponent(String(blobId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (blobAccessToken !== undefined) {
        localVarQueryParameter['blobAccessToken'] = blobAccessToken;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Check file download is eligible, create temp token.
     * @param {string} blobId A blob ID to download file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadBlobCheck: async (
      blobId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'blobId' is not null or undefined
      assertParamExists('downloadBlobCheck', 'blobId', blobId);
      const localVarPath = `/api/storage/{blobId}/download/eligible`.replace(
        `{${'blobId'}}`,
        encodeURIComponent(String(blobId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication KDRFCAuthorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get Blob Projection(Detail) information.
     * @param {string} blobId Target blob ID to get information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlobDetailsAsync: async (
      blobId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'blobId' is not null or undefined
      assertParamExists('getBlobDetailsAsync', 'blobId', blobId);
      const localVarPath = `/api/storage/{blobId}`.replace(
        `{${'blobId'}}`,
        encodeURIComponent(String(blobId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication KDRFCAuthorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Returns list of folder/file entries with given folder id.
     * @param {string} [folderId] (Required) Folder ID to lookup.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderAsync: async (
      folderId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/storage/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication KDRFCAuthorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (folderId !== undefined) {
        localVarQueryParameter['folderId'] = folderId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Get Blob\'s Folder Information
     * @param {string} blobId A blob ID to resolve path on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveBlobPathAsync: async (
      blobId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'blobId' is not null or undefined
      assertParamExists('resolveBlobPathAsync', 'blobId', blobId);
      const localVarPath = `/api/storage/{blobId}/resolve`.replace(
        `{${'blobId'}}`,
        encodeURIComponent(String(blobId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication KDRFCAuthorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary Upload blob file to storage.
     * @param {string} parentFolderId Parent Folder Id - Where file stored.
     * @param {File} fileContents File Contents, Via FormFile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadBlobFileAsync: async (
      parentFolderId: string,
      fileContents: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'parentFolderId' is not null or undefined
      assertParamExists('uploadBlobFileAsync', 'parentFolderId', parentFolderId);
      // verify required parameter 'fileContents' is not null or undefined
      assertParamExists('uploadBlobFileAsync', 'fileContents', fileContents);
      const localVarPath = `/api/storage/upload`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

      // authentication KDRFCAuthorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (parentFolderId !== undefined) {
        localVarFormParams.append('ParentFolderId', parentFolderId as any);
      }

      if (fileContents !== undefined) {
        localVarFormParams.append('FileContents', fileContents as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * StorageApi - functional programming interface
 * @export
 */
export const StorageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StorageApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create Folder under parent folder.
     * @param {CreateBlobFolderRequest} [createBlobFolderRequest] Create Blob Folder Request. See schemas below.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createFolderAsync(
      createBlobFolderRequest?: CreateBlobFolderRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlobProjection>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createFolderAsync(
        createBlobFolderRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This API does return 202 in case of long-processing recursive deletion.
     * @summary Remove Blob(and it\'s subfolder if file type is folder.)
     * @param {string} blobId Target blob ID to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteBlobAsync(
      blobId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlobAsync(blobId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Download Blob File
     * @param {string} blobId A blob ID to download file
     * @param {string} [blobAccessToken] A Blob Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async downloadBlobAsync(
      blobId: string,
      blobAccessToken?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downloadBlobAsync(
        blobId,
        blobAccessToken,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Check file download is eligible, create temp token.
     * @param {string} blobId A blob ID to download file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async downloadBlobCheck(
      blobId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlobEligibleResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downloadBlobCheck(blobId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Blob Projection(Detail) information.
     * @param {string} blobId Target blob ID to get information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlobDetailsAsync(
      blobId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlobProjection>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBlobDetailsAsync(
        blobId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Returns list of folder/file entries with given folder id.
     * @param {string} [folderId] (Required) Folder ID to lookup.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listFolderAsync(
      folderId?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlobProjection>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listFolderAsync(folderId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get Blob\'s Folder Information
     * @param {string} blobId A blob ID to resolve path on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resolveBlobPathAsync(
      blobId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlobProjection>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resolveBlobPathAsync(
        blobId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Upload blob file to storage.
     * @param {string} parentFolderId Parent Folder Id - Where file stored.
     * @param {File} fileContents File Contents, Via FormFile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadBlobFileAsync(
      parentFolderId: string,
      fileContents: File,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlobProjection>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBlobFileAsync(
        parentFolderId,
        fileContents,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * StorageApi - factory interface
 * @export
 */
export const StorageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = StorageApiFp(configuration);
  return {
    /**
     *
     * @summary Create Folder under parent folder.
     * @param {CreateBlobFolderRequest} [createBlobFolderRequest] Create Blob Folder Request. See schemas below.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolderAsync(
      createBlobFolderRequest?: CreateBlobFolderRequest,
      options?: any
    ): AxiosPromise<BlobProjection> {
      return localVarFp
        .createFolderAsync(createBlobFolderRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This API does return 202 in case of long-processing recursive deletion.
     * @summary Remove Blob(and it\'s subfolder if file type is folder.)
     * @param {string} blobId Target blob ID to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBlobAsync(blobId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteBlobAsync(blobId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Download Blob File
     * @param {string} blobId A blob ID to download file
     * @param {string} [blobAccessToken] A Blob Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadBlobAsync(blobId: string, blobAccessToken?: string, options?: any): AxiosPromise<File> {
      return localVarFp
        .downloadBlobAsync(blobId, blobAccessToken, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Check file download is eligible, create temp token.
     * @param {string} blobId A blob ID to download file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadBlobCheck(blobId: string, options?: any): AxiosPromise<BlobEligibleResponse> {
      return localVarFp
        .downloadBlobCheck(blobId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Blob Projection(Detail) information.
     * @param {string} blobId Target blob ID to get information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlobDetailsAsync(blobId: string, options?: any): AxiosPromise<BlobProjection> {
      return localVarFp
        .getBlobDetailsAsync(blobId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns list of folder/file entries with given folder id.
     * @param {string} [folderId] (Required) Folder ID to lookup.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderAsync(folderId?: string, options?: any): AxiosPromise<Array<BlobProjection>> {
      return localVarFp
        .listFolderAsync(folderId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Blob\'s Folder Information
     * @param {string} blobId A blob ID to resolve path on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveBlobPathAsync(blobId: string, options?: any): AxiosPromise<Array<BlobProjection>> {
      return localVarFp
        .resolveBlobPathAsync(blobId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upload blob file to storage.
     * @param {string} parentFolderId Parent Folder Id - Where file stored.
     * @param {File} fileContents File Contents, Via FormFile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadBlobFileAsync(
      parentFolderId: string,
      fileContents: File,
      options?: any
    ): AxiosPromise<BlobProjection> {
      return localVarFp
        .uploadBlobFileAsync(parentFolderId, fileContents, options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * StorageApi - object-oriented interface
 * @export
 * @class StorageApi
 * @extends {BaseAPI}
 */
export class StorageApi extends BaseAPI {
  /**
   *
   * @summary Create Folder under parent folder.
   * @param {CreateBlobFolderRequest} [createBlobFolderRequest] Create Blob Folder Request. See schemas below.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StorageApi
   */
  public createFolderAsync(
    createBlobFolderRequest?: CreateBlobFolderRequest,
    options?: AxiosRequestConfig
  ) {
    return StorageApiFp(this.configuration)
      .createFolderAsync(createBlobFolderRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This API does return 202 in case of long-processing recursive deletion.
   * @summary Remove Blob(and it\'s subfolder if file type is folder.)
   * @param {string} blobId Target blob ID to remove.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StorageApi
   */
  public deleteBlobAsync(blobId: string, options?: AxiosRequestConfig) {
    return StorageApiFp(this.configuration)
      .deleteBlobAsync(blobId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Download Blob File
   * @param {string} blobId A blob ID to download file
   * @param {string} [blobAccessToken] A Blob Access Token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StorageApi
   */
  public downloadBlobAsync(blobId: string, blobAccessToken?: string, options?: AxiosRequestConfig) {
    return StorageApiFp(this.configuration)
      .downloadBlobAsync(blobId, blobAccessToken, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Check file download is eligible, create temp token.
   * @param {string} blobId A blob ID to download file
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StorageApi
   */
  public downloadBlobCheck(blobId: string, options?: AxiosRequestConfig) {
    return StorageApiFp(this.configuration)
      .downloadBlobCheck(blobId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Blob Projection(Detail) information.
   * @param {string} blobId Target blob ID to get information.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StorageApi
   */
  public getBlobDetailsAsync(blobId: string, options?: AxiosRequestConfig) {
    return StorageApiFp(this.configuration)
      .getBlobDetailsAsync(blobId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Returns list of folder/file entries with given folder id.
   * @param {string} [folderId] (Required) Folder ID to lookup.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StorageApi
   */
  public listFolderAsync(folderId?: string, options?: AxiosRequestConfig) {
    return StorageApiFp(this.configuration)
      .listFolderAsync(folderId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Blob\'s Folder Information
   * @param {string} blobId A blob ID to resolve path on.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StorageApi
   */
  public resolveBlobPathAsync(blobId: string, options?: AxiosRequestConfig) {
    return StorageApiFp(this.configuration)
      .resolveBlobPathAsync(blobId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Upload blob file to storage.
   * @param {string} parentFolderId Parent Folder Id - Where file stored.
   * @param {File} fileContents File Contents, Via FormFile.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StorageApi
   */
  public uploadBlobFileAsync(
    parentFolderId: string,
    fileContents: File,
    options?: AxiosRequestConfig
  ) {
    return StorageApiFp(this.configuration)
      .uploadBlobFileAsync(parentFolderId, fileContents, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
